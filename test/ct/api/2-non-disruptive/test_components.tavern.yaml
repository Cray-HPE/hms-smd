# MIT License
#
# (C) Copyright [2019-2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Hardware State Manager (HSM) Components API.
# Author: Mitch Schooler, Isa Wazirzada
# Service: Hardware State Manager

# HMS test metrics test cases: 50
# GET /Components?type=Node API response code all Nodes
# GET /Components?type=Node API response body all Nodes
# GET /Components API response code
# GET /Components API response body
# GET /Components?id={xname} any API response code
# GET /Components?id={xname} any API response body
# GET /Components?type=NodeBMC API response code all NodeBMCs
# GET /Components?type=NodeBMC API response body all NodeBMCs
# GET /Components?type=NodeBMC API response code
# GET /Components?type=NodeBMC API response body
# GET /Components/{xname} nodeBMC API response code
# GET /Components/{xname} nodeBMC API response body
# GET /Components?type=Node API response code
# GET /Components?type=Node API response code
# GET /Components/{xname} node API response code
# GET /Components/{xname} node API response body
# GET /Components/ByNID/{nid} node API response code
# GET /Components/ByNID/{nid} node API response body
# GET /Components/{xname} node API response code
# GET /Components/{xname} node API response body
# GET /Components?type=Node API response code
# GET /Components?type=Node API response body
# GET /Components?type=Node&Flag={flag} API response code
# GET /Components?type=Node&Flag={flag} API response body
# GET /Components?type=Node&Arch=X86 API response code
# GET /Components?type=Node&Arch=X86 API response body
# GET /Components?type=Node&nid={nid} API response code
# GET /Components?type=Node&nid={nid} API response body
# GET /Components?role=Compute API response code
# GET /Components?role=Compute API response body
# GET /Components?type=Booster invalid API response code
# GET /Components?type=Booster invalid API response body
# GET /Components?state=Ready API response code
# GET /Components?state=Ready API response body
# GET /Components?stateonly=True API response code
# GET /Components?stateonly=True API response body
# GET /Components?flagonly=True API response code
# GET /Components?flagonly=True API response body
# GET /Components?roleonly=True API response code
# GET /Components?roleonly=True API response body
# GET /Components?nidonly=True API response code
# GET /Components?nidonly=True API response body
# GET /Components?type=Node API response code
# GET /Components?type=Node API response body
# GET /Components/Query/{xname} node API response code
# GET /Components/Query/{xname} node API response body
# GET /Components?type=NodeBMC API response code
# GET /Components?type=NodeBMC API response body
# GET /Components/Query/{xname} nodeBMC API response code
# GET /Components/Query/{xname} nodeBMC API response body
---
test_name: Ensure that we can query for all Nodes in the Component collection

stages:
  # GET /Components?type=Node API response code all Nodes
  # GET /Components?type=Node API response body all Nodes
  - name: Verify the expected response fields for all Nodes
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        pattern: "x[0-9]+c[0-9]+s[0-9]+b[0-9]+n[0-9]+"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Standby"
                          - "Ready"
                          - "Halt"
                          - "On"
                          - "Off"
                          # needed for ncn-m001 when it is not part of the management network CASMHMS-4862
                          - "Populated"
                      Flag:
                        type: str
                        required: True
                        # allow flags that indicate hardware problems here and catch them in hardware-checks instead
                        enum:
                          - "OK"
                          - "Warning"
                          - "Alert"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: True
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"
                          - "Mountain"
                          - "Hill"
                      Locked:
                        type: bool
                        required: False

---
test_name: Verify the Components collection

stages:
  # GET /Components API response code
  # GET /Components API response body
  - name: Make sure that a list of Components is returned
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      json:
        Components: !anything
      save:
        json:
          ID: Components[0].ID

  # GET /Components?id={xname} any API response code
  # GET /Components?id={xname} any API response body
  - name: Make sure that the Component is returned
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?id={ID}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      json:
        Components: !anything
      save:
        json:
          ID: Components[0].ID

---
test_name: Ensure that we can query for all NodeBMCs in the Component collection

stages:
  # GET /Components?type=NodeBMC API response code all NodeBMCs
  # GET /Components?type=NodeBMC API response body all NodeBMCs
  - name: Verify the expected response fields for all NodeBMCs
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeBMC"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        pattern: "x[0-9]+c[0-9]+s[0-9]+b[0-9]+"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "NodeBMC"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      # BMCs of NCNs are marked with the Management role
                      Role:
                        type: str
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"
                          - "Mountain"
                          - "Hill"
                      # anything with an xname can be locked, including NodeBMCs
                      Locked:
                        type: bool
                        required: False

---
test_name: Ensure that we can query on the NodeBMCs in the Component collection

stages:
  # GET /Components?type=NodeBMC API response code
  # GET /Components?type=NodeBMC API response body
  - name: Verify successfully querying for NodeBMCs and get an xname for a particular NodeBMC from the response
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeBMC"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      json:
        Components: !anything
      save:
        json:
          xname: Components[0].ID

  # GET /Components/{xname} nodeBMC API response code
  # GET /Components/{xname} nodeBMC API response body
  - name: Ensure that we can query on a specific xname in the Component collection by looking for NodeBMCs
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Arch:
                type: str
                required: True
              Class:
                type: str
                required: True
                enum:
                  - "River"
                  - "Mountain"
                  - "Hill"
              Enabled:
                type: bool
                required: True
              Flag:
                type: str
                required: True
              ID:
                type: str
                required: True
                enum:
                  - "{xname}"
              # anything with an xname can be locked, including NodeBMCs
              Locked:
                type: bool
                required: False
              # BMCs of NCNs are marked with the Management role
              Role:
                type: str
                required: False
              NetType:
                type: str
                required: True
              State:
                type: str
                required: True
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"

---
test_name: Ensure that we can make a variety of queries on the Components collection

# Turn strict json key checking off since 'SubRole' field may not always be present, such as for compute nodes
strict:
  - json:off

stages:
  # GET /Components?type=Node API response code
  # GET /Components?type=Node API response code
  - name: Ensure that we can query on the Component collection by looking for Compute nodes
    request:
      # also query with role=Compute since not all of the same node data is expected
      # in HSM for the master management PIT node ncn-m001 CASMHMS-4862
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      json:
        Components: !anything
      save:
        json:
          Arch: Components[0].Arch
          Class: Components[0].Class
          Enabled: Components[0].Enabled
          Flag: Components[0].Flag
          xname: Components[0].ID
          NID: Components[0].NID
          NetType: Components[0].NetType
          Role: Components[0].Role
          State: Components[0].State
          Type: Components[0].Type

  # GET /Components/{xname} node API response code
  # GET /Components/{xname} node API response body
  - name: Ensure that we can query on a specific compute node xname in the Component collection
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      json:
        Arch: !anything
        Class: "{Class:s}"
        Enabled: !anybool
        Flag: !anything
        ID: "{xname:s}"
        NID: !int "{NID:d}"
        NetType: !anything
        Role: !anything
        State: !anything
        Type: !anything

  # GET /Components/ByNID/{nid} node API response code
  # GET /Components/ByNID/{nid} node API response body
  - name: Ensure that we can query on a specific NID in the Components collection
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/{NID}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Arch:
                type: str
              Class:
                type: str
                required: True
                enum:
                  - "River"
                  - "Mountain"
                  - "Hill"
              Enabled:
                type: bool
              Flag:
                type: str
              ID:
                type: str
              Locked:
                type: bool
                required: False
              NID:
                type: int
              NetType:
                type: str
              Role:
                type: str
              SoftwareStatus:
                type: str
                required: False
              State:
                type: str
                enum:
                  - "Standby"
                  - "Ready"
                  - "Halt"
                  - "On"
                  - "Off"
              SubRole:
                type: str
                required: False
              Subtype:
                type: str
                required: False
              Type:
                type: str

  # GET /Components/{xname} node API response code
  # GET /Components/{xname} node API response body
  - name: GET the State for a given xname
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Arch:
                type: str
              Class:
                type: str
                required: True
                enum:
                  - "River"
                  - "Mountain"
                  - "Hill"
              Enabled:
                type: bool
              Flag:
                type: str
              ID:
                type: str
              Locked:
                type: bool
                required: False
              NID:
                type: int
              NetType:
                type: str
              Role:
                type: str
              SoftwareStatus:
                type: str
                required: False
              State:
                type: str
                enum:
                  - "Standby"
                  - "Ready"
                  - "Halt"
                  - "On"
                  - "Off"
              SubRole:
                type: str
                required: False
              Subtype:
                type: str
                required: False
              Type:
                type: str

  # GET /Components?type=Node API response code
  # GET /Components?type=Node API response body
  - name: Query using the type parameter to look for hardware of the Node type
    request:
      # also query with role=Compute since not all of the same node data is expected
      # in HSM for the master management PIT node ncn-m001 CASMHMS-4862
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                sequence:
                  - type: map
                    matching: all
                    mapping:
                      Arch:
                        type: str
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"
                          - "Mountain"
                          - "Hill"
                      Enabled:
                        type: bool
                      Flag:
                        type: str
                      ID:
                        type: str
                      Locked:
                        type: bool
                        required: False
                      NID:
                        type: int
                      NetType:
                        type: str
                      Role:
                        type: str
                      SoftwareStatus:
                        type: str
                        required: False
                      State:
                        type: str
                        enum:
                          - "Standby"
                          - "Ready"
                          - "Halt"
                          - "On"
                          - "Off"
                      SubRole:
                        type: str
                        required: False
                      Subtype:
                        type: str
                        required: False
                      Type:
                        type: str
                        enum:
                          - "Node"

  # GET /Components?type=Node&Flag={flag} API response code
  # GET /Components?type=Node&Flag={flag} API response body
  - name: Query using the type and flag parameters to look for hardware of the Node type with a certain Flag
    request:
      # also query with role=Compute since not all of the same node data is expected
      # in HSM for the master management PIT node ncn-m001 CASMHMS-4862
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute&Flag={Flag}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                sequence:
                  - type: map
                    matching: all
                    mapping:
                      Arch:
                        type: str
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"
                          - "Mountain"
                          - "Hill"
                      Enabled:
                        type: bool
                      Flag:
                        type: str
                        enum:
                          - "{Flag}"
                      ID:
                        type: str
                      Locked:
                        type: bool
                        required: False
                      NID:
                        type: int
                      NetType:
                        type: str
                      Role:
                        type: str
                      SoftwareStatus:
                        type: str
                        required: False
                      State:
                        type: str
                        enum:
                          - "Standby"
                          - "Ready"
                          - "Halt"
                          - "On"
                          - "Off"
                      SubRole:
                        type: str
                        required: False
                      Subtype:
                        type: str
                        required: False
                      Type:
                        type: str
                        enum:
                          - "Node"

  # GET /Components?type=Node&Arch=X86 API response code
  # GET /Components?type=Node&Arch=X86 API response body
  - name: Query using the type and flag parameters to look for hardware of the X86 Arch type
    request:
      # also query with role=Compute since not all of the same node data is expected
      # in HSM for the master management PIT node ncn-m001 CASMHMS-4862
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&role=Compute&Arch=X86"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                sequence:
                  - type: map
                    matching: all
                    mapping:
                      Arch:
                        type: str
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"
                          - "Mountain"
                          - "Hill"
                      Enabled:
                        type: bool
                      Flag:
                        type: str
                      ID:
                        type: str
                      Locked:
                        type: bool
                        required: False
                      NID:
                        type: int
                      NetType:
                        type: str
                      Role:
                        type: str
                      SoftwareStatus:
                        type: str
                        required: False
                      State:
                        type: str
                        enum:
                          - "Standby"
                          - "Ready"
                          - "Halt"
                          - "On"
                          - "Off"
                      SubRole:
                        type: str
                        required: False
                      Subtype:
                        type: str
                        required: False
                      Type:
                        type: str
                        enum:
                          - "Node"

  # GET /Components?type=Node&nid={nid} API response code
  # GET /Components?type=Node&nid={nid} API response body
  - name: Query using the type and nid query parameters
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node&nid={NID}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                sequence:
                  - type: map
                    matching: all
                    mapping:
                      Arch:
                        type: str
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"
                          - "Mountain"
                          - "Hill"
                      Enabled:
                        type: bool
                      Flag:
                        type: str
                      ID:
                        type: str
                      Locked:
                        type: bool
                        required: False
                      NID:
                        type: int
                        enum:
                          - !int "{NID:d}"
                      NetType:
                        type: str
                      Role:
                        type: str
                      SoftwareStatus:
                        type: str
                        required: False
                      State:
                        type: str
                        enum:
                          - "Standby"
                          - "Ready"
                          - "Halt"
                          - "On"
                          - "Off"
                      SubRole:
                        type: str
                        required: False
                      Subtype:
                        type: str
                        required: False
                      Type:
                        type: str
                        enum:
                          - "Node"

  # GET /Components?role=Compute API response code
  # GET /Components?role=Compute API response body
  - name: Query using the role query parameter
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                sequence:
                  - type: map
                    matching: all
                    mapping:
                      Arch:
                        type: str
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"
                          - "Mountain"
                          - "Hill"
                      Enabled:
                        type: bool
                      Flag:
                        type: str
                      ID:
                        type: str
                      Locked:
                        type: bool
                        required: False
                      NID:
                        type: int
                      NetType:
                        type: str
                      Role:
                        type: str
                        enum:
                          - "Compute"
                      SoftwareStatus:
                        type: str
                        required: False
                      State:
                        type: str
                        enum:
                          - "Standby"
                          - "Ready"
                          - "Halt"
                          - "On"
                          - "Off"
                      SubRole:
                        type: str
                        required: False
                      Subtype:
                        type: str
                        required: False
                      Type:
                        type: str

  # GET /Components?type=Booster invalid API response code
  # GET /Components?type=Booster invalid API response body
  - name: Verify failure when querying the Component collection for an invalid type of hardware (Booster)
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Booster"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 400
      json:
        detail: "bad query param: Argument was not a valid HMS Type"
        status: 400
        title: "Bad Request"
        type: "about:blank"

  # GET /Components?state=Ready API response code
  # GET /Components?state=Ready API response body
  - name: Query the Components collection using the State query parameter
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?state=Ready"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      json:
        Components: !anything
      save:
        json:
          ID: Components[0].ID

  # GET /Components?stateonly=True API response code
  # GET /Components?stateonly=True API response body
  - name: Query the Components collection using the StateOnly query parameter
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?stateonly=True"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Components:
                type: seq
                required: True
                sequence:
                  - type: map
                    mapping:
                      Flag:
                        type: str
                        required: True
                      ID:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True

  # GET /Components?flagonly=True API response code
  # GET /Components?flagonly=True API response body
  - name: Query the Components collection using the FlagOnly query parameter
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?flagonly=True"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Components:
                type: seq
                required: True
                sequence:
                  - type: map
                    mapping:
                      Flag:
                        type: str
                        required: True
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True

  # GET /Components?roleonly=True API response code
  # GET /Components?roleonly=True API response body
  - name: Query the Components collection using the RoleOnly query parameter
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?roleonly=True"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Components:
                type: seq
                required: True
                sequence:
                  - type: map
                    mapping:
                      ID:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      Type:
                        type: str
                        required: True

  # GET /Components?nidonly=True API response code
  # GET /Components?nidonly=True API response body
  - name: Query the Components collection using the NidOnly query parameter
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?nidonly=True"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Components:
                type: seq
                required: True
                sequence:
                  - type: map
                    mapping:
                      ID:
                        type: str
                        required: True
                      NID:
                        type: int
                        required: False
                      Type:
                        type: str
                        required: True

---
test_name: Ensure that we can call the Component Query API with node xnames

stages:
  # GET /Components?type=Node API response code
  # GET /Components?type=Node API response body
  - name: Verify successfully querying for Nodes and get an xname for a particular Node from the response
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      json:
        Components: !anything
      save:
        json:
          xname: Components[0].ID

  # GET /Components/Query/{xname} node API response code
  # GET /Components/Query/{xname} node API response body
  - name: Ensure that we can query for a specific Node xname using the Component Query API
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Components:
                type: seq
                required: True
                sequence:
                  - type: map
                    mapping:
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"
                          - "Mountain"
                          - "Hill"
                      Enabled:
                        type: bool
                        required: True
                      Flag:
                        type: str
                        required: True
                      ID:
                        type: str
                        required: True
                        enum:
                          - "{xname}"
                      Locked:
                        type: bool
                        required: False
                      NID:
                        type: int
                        required: True
                      NetType:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      State:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: False
                      Subtype:
                        type: str
                        required: False
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"

---
test_name: Ensure that we can call the Component Query API with node BMC xnames

stages:
  # GET /Components?type=NodeBMC API response code
  # GET /Components?type=NodeBMC API response body
  - name: Verify successfully querying for NodeBMCs and get an xname for a particular NodeBMC from the response
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeBMC"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      json:
        Components: !anything
      save:
        json:
          xname: Components[0].ID

  # GET /Components/Query/{xname} nodeBMC API response code
  # GET /Components/Query/{xname} nodeBMC API response body
  - name: Ensure that we can query for a specific NodeBMC xname using the Component Query API
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Components:
                type: seq
                required: True
                sequence:
                  - type: map
                    mapping:
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"
                          - "Mountain"
                          - "Hill"
                      Enabled:
                        type: bool
                        required: True
                      Flag:
                        type: str
                        required: True
                      ID:
                        type: str
                        required: True
                        enum:
                          - "{xname}"
                      # anything with an xname can be locked, including NodeBMCs
                      Locked:
                        type: bool
                        required: False
                      NetType:
                        type: str
                        required: True
                      # BMCs of NCNs are marked with the Management role
                      Role:
                        type: str
                        required: False
                      State:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                        enum:
                          - "NodeBMC"
