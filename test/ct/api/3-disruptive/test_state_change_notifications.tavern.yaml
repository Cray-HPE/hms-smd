# MIT License
#
# (C) Copyright [2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Hardware State Manager (HSM) State Change Notifications (SCN) API.
# Author: Mitch Schooler
# Service: Hardware State Manager

# HMS test metrics test cases: 13
# POST /Subscriptions/SCN
# GET /Subscriptions/SCN
# GET /Subscriptions/SCN/{id} initial subscription
# PATCH /Subscriptions/SCN/{id} remove
# GET /Subscriptions/SCN/{id} updated remove subscription
# PATCH /Subscriptions/SCN/{id} add
# GET /Subscriptions/SCN/{id} updated add subscription
# PATCH /Subscriptions/SCN/{id} replace
# GET /Subscriptions/SCN/{id} updated replace subscription
# PUT /Subscriptions/SCN/{id}
# GET /Subscriptions/SCN/{id} replaced subscription
# DELETE /Subscriptions/SCN/{id} existing subscription
# DELETE /Subscriptions/SCN/{id} nonexistent subscription
---
test_name: Verify POST, GET, PATCH, PUT, and DELETE methods for the State Change Notification APIs

stages:
  #############
  #   Setup   #
  #############

  - name: Retrieve first test subscription ID to delete (if present)
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        $ext:
          function: hsm_test_utils:get_id_of_scn_subscriber_url
          extra_kwargs:
            subscriber_url: "test-hmnfd-9z9z999zzz-9zz9z_9http://test-hmnfd/hmi/v1/scn"

  - name: Delete first test subscription to prevent conflicts (if present)
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subscriber_url_id}"
      method: DELETE
      verify: !bool "{verify}"

  - name: Retrieve second test subscription ID to delete (if present)
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        $ext:
          function: hsm_test_utils:get_id_of_scn_subscriber_url
          extra_kwargs:
            subscriber_url: "test-hmnfd-9z9z999zzz-9zz9z_8http://test-hmnfd/hmi/v1/scn"

  - name: Delete second test subscription to prevent conflicts (if present)
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subscriber_url_id}"
      method: DELETE
      verify: !bool "{verify}"

  #############
  #   Tests   #
  #############

  # POST /Subscriptions/SCN
  - name: Create a State Change Notification subscription
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN"
      method: POST
      verify: !bool "{verify}"
      json: {"Subscriber":"test-hmnfd-9z9z999zzz-9zz9z_9","Enabled":true,"Roles":["compute","service"],"SoftwareStatus":["SCN subscription for CT testing."],"States":["Empty","Populated","Off","On","Standby","Halt","Ready"],"Url":"http://test-hmnfd/hmi/v1/scn"}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: int
                required: True
              Subscriber:
                type: str
                required: True
                enum:
                  - "test-hmnfd-9z9z999zzz-9zz9z_9"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              Roles:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "compute"
                      - "service"
              SoftwareStatus:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "SCN subscription for CT testing."
              States:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "Empty"
                      - "Populated"
                      - "Off"
                      - "On"
                      - "Standby"
                      - "Halt"
                      - "Ready"
              Url:
                type: str
                required: True
                enum:
                  - "http://test-hmnfd/hmi/v1/scn"
      save:
        json:
          subID: ID

  # GET /Subscriptions/SCN
  - name: Retrieve all State Change Notification subscriptions
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              SubscriptionList:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: int
                        required: True
                      Subscriber:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: False
                      Roles:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: str
                      SoftwareStatus:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: str
                      States:
                        type: seq
                        required: True
                        matching: all
                        sequence:
                          - type: str
                            enum:
                              - "Empty"
                              - "empty"
                              - "Unknown"
                              - "unknown"
                              - "Populated"
                              - "populated"
                              - "Off"
                              - "off"
                              - "On"
                              - "on"
                              - "Standby"
                              - "standby"
                              - "Halt"
                              - "halt"
                              - "Ready"
                              - "ready"
                      Url:
                        type: str
                        required: True

  # GET /Subscriptions/SCN/{id} initial subscription
  - name: Retrieve a State Change Notification subscription by ID
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: int
                required: True
                enum:
                  - !int "{subID}"
              Subscriber:
                type: str
                required: True
                enum:
                  - "test-hmnfd-9z9z999zzz-9zz9z_9"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              Roles:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "compute"
                      - "service"
              SoftwareStatus:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "SCN subscription for CT testing."
              States:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "Empty"
                      - "Populated"
                      - "Off"
                      - "On"
                      - "Standby"
                      - "Halt"
                      - "Ready"
              Url:
                type: str
                required: True
                enum:
                  - "http://test-hmnfd/hmi/v1/scn"

  # PATCH /Subscriptions/SCN/{id} remove
  - name: Update a State Change Notification subscription with a remove operation
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: PATCH
      verify: !bool "{verify}"
      json: {"Op":"remove","Roles":["compute"],"States":["Empty","Populated"]}
    response:
      status_code: 204

  # GET /Subscriptions/SCN/{id} updated remove subscription
  - name: Retrieve a State Change Notification subscription by ID
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: int
                required: True
                enum:
                  - !int "{subID}"
              Subscriber:
                type: str
                required: True
                enum:
                  - "test-hmnfd-9z9z999zzz-9zz9z_9"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              Roles:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "service"
              SoftwareStatus:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "SCN subscription for CT testing."
              States:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "Off"
                      - "On"
                      - "Standby"
                      - "Halt"
                      - "Ready"
              Url:
                type: str
                required: True
                enum:
                  - "http://test-hmnfd/hmi/v1/scn"

  # PATCH /Subscriptions/SCN/{id} add
  - name: Update a State Change Notification subscription with an add operation
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: PATCH
      verify: !bool "{verify}"
      json: {"Op":"add","Roles":["compute"],"States":["Populated"]}
    response:
      status_code: 204

  # GET /Subscriptions/SCN/{id} updated add subscription
  - name: Retrieve a State Change Notification subscription by ID
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: int
                required: True
                enum:
                  - !int "{subID}"
              Subscriber:
                type: str
                required: True
                enum:
                  - "test-hmnfd-9z9z999zzz-9zz9z_9"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              Roles:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "compute"
                      - "service"
              SoftwareStatus:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "SCN subscription for CT testing."
              States:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "Populated"
                      - "Off"
                      - "On"
                      - "Standby"
                      - "Halt"
                      - "Ready"
              Url:
                type: str
                required: True
                enum:
                  - "http://test-hmnfd/hmi/v1/scn"

  # PATCH /Subscriptions/SCN/{id} replace
  - name: Update a State Change Notification subscription with a replace operation
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: PATCH
      verify: !bool "{verify}"
      json: {"Op":"replace","Roles":["service"],"States":["Ready","On","Standby"]}
    response:
      status_code: 204

  # GET /Subscriptions/SCN/{id} updated replace subscription
  - name: Retrieve a State Change Notification subscription by ID
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: int
                required: True
                enum:
                  - !int "{subID}"
              Subscriber:
                type: str
                required: True
                enum:
                  - "test-hmnfd-9z9z999zzz-9zz9z_9"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              Roles:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "service"
              SoftwareStatus:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "SCN subscription for CT testing."
              States:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "Ready"
                      - "On"
                      - "Standby"
              Url:
                type: str
                required: True
                enum:
                  - "http://test-hmnfd/hmi/v1/scn"

  # PUT /Subscriptions/SCN/{id}
  - name: Replace a State Change Notification subscription
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: PUT
      verify: !bool "{verify}"
      json: {"Subscriber":"test-hmnfd-9z9z999zzz-9zz9z_8","Enabled":false,"Roles":["compute"],"SoftwareStatus":["SCN subscription for CT testing."],"States":["Empty","Populated","Off","On","Halt"],"Url":"http://test-hmnfd/hmi/v1/scn"}
    response:
      status_code: 204

  # GET /Subscriptions/SCN/{id} replaced subscription
  - name: Retrieve a State Change Notification subscription by ID
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: int
                required: True
                enum:
                  - !int "{subID}"
              Subscriber:
                type: str
                required: True
                enum:
                  - "test-hmnfd-9z9z999zzz-9zz9z_8"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              Roles:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "compute"
              SoftwareStatus:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "SCN subscription for CT testing."
              States:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "Empty"
                      - "Populated"
                      - "On"
                      - "Off"
                      - "Halt"
              Url:
                type: str
                required: True
                enum:
                  - "http://test-hmnfd/hmi/v1/scn"

  # DELETE /Subscriptions/SCN/{id} existing subscription
  - name: Delete a State Change Notification subscription by ID
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              code:
                type: int
                required: True
                enum:
                  - 0
              message:
                type: str
                required: True
                enum:
                  - "Subscription deleted"

  # DELETE /Subscriptions/SCN/{id} nonexistent subscription
  - name: Attempt to delete a State Change Notification subscription by ID that doesn't exist
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{subID}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
              detail:
                type: str
                required: True
                enum:
                  - "Subscription not found"
              status:
                type: int
                required: True
                enum:
                  - 404
