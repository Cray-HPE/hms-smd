# MIT License
#
# (C) Copyright [2019-2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Hardware State Manager (HSM) state change notifications (SCN) API.
# Author: Mitch Schooler
# Service: Hardware State Manager

# HMS test metrics test cases: 4
# 1. GET /Subscriptions/SCN API response code
# 2. GET /Subscriptions/SCN API response body
# 3. GET /Subscriptions/SCN/{num} API response code
# 4. GET /Subscriptions/SCN/{num} API response body
---
test_name: Ensure that we can gather information from the state change notifications collection

stages:
  # 1. GET /Subscriptions/SCN API response code
  # 2. GET /Subscriptions/SCN API response body
  - name: Ensure that we can conduct a query on the state change notifications collection
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              SubscriptionList:
                type: seq
                matching: all
                sequence:
                  - type: map
                    mapping:
                      Enabled:
                        type: bool
                        required: False
                      ID:
                        type: int
                        required: True
                      Roles:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: str
                      SoftwareStatus:
                        type: seq
                        required: False
                        matching: all
                        sequence:
                          - type: str
                      States:
                        type: seq
                        required: True
                        matching: all
                        sequence:
                          - type: str
                            enum:
                              - "Empty"
                              - "empty"
                              - "Unknown"
                              - "unknown"
                              - "Populated"
                              - "populated"
                              - "Off"
                              - "off"
                              - "On"
                              - "on"
                              - "Standby"
                              - "standby"
                              - "Halt"
                              - "halt"
                              - "Ready"
                              - "ready"
                      Subscriber:
                        type: str
                        required: True
                      Url:
                        type: str
                        required: True
      save:
        json:
          ID: SubscriptionList[0].ID

  # 3. GET /Subscriptions/SCN/{num} API response code
  # 4. GET /Subscriptions/SCN/{num} API response body
  - name: Ensure that we can conduct a query for a specific ID from the state change notifications collection
    request:
      url: "{hsm_base_url}/hsm/v2/Subscriptions/SCN/{ID}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              Enabled:
                type: bool
                required: False
              ID:
                type: int
                required: True
              Roles:
                type: seq
                required: False
                matching: all
                sequence:
                  - type: str
              SoftwareStatus:
                type: seq
                required: False
                matching: all
                sequence:
                  - type: str
              States:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    enum:
                      - "Empty"
                      - "empty"
                      - "Unknown"
                      - "unknown"
                      - "Populated"
                      - "populated"
                      - "Off"
                      - "off"
                      - "On"
                      - "on"
                      - "Standby"
                      - "standby"
                      - "Halt"
                      - "halt"
                      - "Ready"
                      - "ready"
              Subscriber:
                type: str
                required: True
              Url:
                type: str
                required: True
