# MIT License

# (C) Copyright [2019-2021] Hewlett Packard Enterprise Development LP

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Hardware State Manager (HSM) component endpoints API.
# Author: Mitch Schooler, Isa Wazirzada
# Service: Hardware State Manager

# HMS test metrics test cases: 17
# 1. GET /ComponentEndpoints API response code
# 2. GET /ComponentEndpoints API response body
# 3. GET /ComponentEndpoints?type=Node API response code
# 4. GET /ComponentEndpoints?type=Node API response body
# 5. GET /ComponentEndpoints/{node} API response code
# 6. GET /ComponentEndpoints/{node} API response body
# 7. GET /ComponentEndpoints?type=NodeBMC API response code
# 8. GET /ComponentEndpoints?type=NodeBMC API response body
# 9. GET /ComponentEndpoints/{nodeBMC} API response code
# 10. GET /ComponentEndpoints/{nodeBMC} API response body
# 11. GET /ComponentEndpoints?type=NodeEnclosure API response code
# 12. GET /ComponentEndpoints?type=NodeEnclosure API response body
# 13. GET /ComponentEndpoints/{nodeEnclosure} API response code
# 14. GET /ComponentEndpoints/{nodeEnclosure} API response body
# 15. GET /ComponentEndpoints/{nodeBMC} valid nonexistent API response code
# 16. GET /ComponentEndpoints/{nodeBMC} invalid API response code
# 17. GET /ComponentEndpoints/{nid} unsupported id API response code
---
test_name: Query the ComponentEndpoints collection

stages:
  # 1. GET /ComponentEndpoints API response code
  # 2. GET /ComponentEndpoints API response body
  - name: Ensure that we can conduct a query on the ComponentEndpoints collection
    request:
      url: "{base_url}/smd/hsm/v1/Inventory/ComponentEndpoints"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ComponentEndpoints:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        pattern: "x[0-9]+[cm][0-9]+.*"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "CabinetPDUController"
                          - "CabinetPDUPowerConnector"
                          - "CabinetPDU"
                          - "ChassisBMC"
                          - "Chassis"
                          - "ComputeModule"
                          - "HSNBoard"
                          - "NodeBMC"
                          - "NodeEnclosure"
                          - "Node"
                          - "RouterBMC"
                          - "RouterModule"
                      RedfishType:
                        type: str
                        required: True
                        enum:
                          - "C13"
                          - "Chassis"
                          - "ComputerSystem"
                          - "Manager"
                          - "Outlet"
                          - "PowerDistribution"
                      RedfishSubtype:
                        type: str
                        required: True
                        enum:
                          #TODO: may be empty for CabinetPDUController
                          #- ""
                          - "Blade"
                          - "BMC"
                          - "C13"
                          - "Cx"
                          - "Enclosure"
                          - "EnclosureManager"
                          - "Physical"
                          - "RackMount"
                          - "RackPDU"
                      MACAddr:
                        type: str
                        required: False
                        pattern: "[a-z0-9]{{2}}(:[a-z0-9]{{2}}){{5}}"
                      UUID:
                        type: str
                        required: False
                        pattern: "[a-zA-Z0-9]{{8}}-[a-zA-Z0-9]{{4}}-[a-zA-Z0-9]{{4}}-[a-zA-Z0-9]{{4}}-[a-zA-Z0-9]{{12}}"
                      OdataID:
                        type: str
                        required: True
                        pattern: "/redfish/v1/.*"
                      RedfishEndpointID:
                        type: str
                        required: True
                        pattern: "x[0-9]+[cm][0-9]+.*"
                      Enabled:
                        type: bool
                        required: True
                      RedfishEndpointID:
                        type: str
                        required: True
                        pattern: "x[0-9]+[cm][0-9]+.*"
                      RedfishURL:
                        type: str
                        required: True
                        pattern: "x[0-9]+[cm][0-9]+.*/redfish/v1/.*"
                      ComponentEndpointType:
                        type: str
                        required: True
                        enum:
                          - "ComponentEndpointChassis"
                          - "ComponentEndpointComputerSystem"
                          - "ComponentEndpointManager"
                          - "ComponentEndpointOutlet"
                          - "ComponentEndpointPowerDistribution"
                      RedfishChassisInfo:
                        type: map
                        required: False
                        mapping:
                          Name:
                            type: str
                            required: True
                          Actions:
                            type: map
                            required: False
                            allowempty: True
                      RedfishEndpointFQDN:
                        type: str
                        required: True
                        pattern: "x[0-9]+[cm][0-9]+.*"
                      RedfishManagerInfo:
                        type: map
                        required: False
                        mapping:
                          Name:
                            type: str
                            required: True
                          Actions:
                            type: map
                            #TODO: may be missing for CabinetPDUController
                            #required: False
                            required: True
                            allowempty: True
                          EthernetNICInfo:
                            type: seq
                            matching: all
                            # this data is not present for RouterBMCs
                            required: False
                            sequence:
                              - type: map
                                required: True
                                mapping:
                                  RedfishId:
                                    type: str
                                    required: True
                                    length:
                                      min: 1
                                    pattern: "[0-9]+|\
bond[0-9]+|\
usb[0-9]+"
                                  "@odata.id":
                                    type: str
                                    required: True
                                  Description:
                                    type: str
                                    required: True
                                  FQDN:
                                    type: str
                                    required: False
                                  Hostname:
                                    type: str
                                    required: False
                                  InterfaceEnabled:
                                    type: bool
                                    required: True
                                  MACAddress:
                                    type: str
                                    required: True
                                    pattern: "[a-z0-9]{{2}}(:[a-z0-9]{{2}}){{5}}"
                                  PermanentMACAddress:
                                    type: str
                                    required: True
                                    pattern: "[a-z0-9]{{2}}(:[a-z0-9]{{2}}){{5}}"
                      RedfishOutletInfo:
                        type: map
                        required: False
                        mapping:
                          Name:
                            type: str
                            required: True
                          Actions:
                            type: map
                            required: False
                            allowempty: True
                      RedfishPDUInfo:
                        type: map
                        required: False
                        mapping:
                          Name:
                            type: str
                            required: True
                          Actions:
                            type: map
                            required: False
                            allowempty: True
                      RedfishSystemInfo:
                        type: map
                        required: False
                        mapping:
                          Name:
                            type: str
                            required: True
                          Actions:
                            type: map
                            required: True
                            allowempty: True
                          EthernetNICInfo:
                            type: seq
                            matching: all
                            required: True
                            sequence:
                              - type: map
                                required: True
                                mapping:
                                  RedfishId:
                                    type: str
                                    required: True
                                    pattern: "[0-9]+|\
HPCNet[0-9]+|\
ManagementEthernet"
                                  "@odata.id":
                                    type: str
                                    required: True
                                  Description:
                                    type: str
                                    required: False
                                  MACAddress:
                                    type: str
                                    required: True
                                    #TODO: Unsure about 'Not Available'
                                    pattern: "[a-z0-9]{{2}}(:[a-z0-9]{{2}}){{5}}|\
Not Available"
                                  PermanentMACAddress:
                                    type: str
                                    required: False
                                    #TODO: Unsure about 'Not Available'
                                    pattern: "[a-z0-9]{{2}}(:[a-z0-9]{{2}}){{5}}|\
Not Available"
                          PowerURL:
                            type: str
                            required: False
                          PowerControl:
                            type: seq
                            matching: all
                            required: False
                            sequence:
                              - type: map
                                required: True
                                # this allows the Oem key to be present as a map or a string
                                allowempty: True
                                mapping:
                                  MemberId:
                                    type: str
                                    required: True
                                    pattern: "[0-9]+|\
Node"
                                  "@odata.id":
                                    type: str
                                    required: True
                                  PowerCapacityWatts:
                                    type: int
                                    required: False
                                  Name:
                                    type: str
                                    required: False
                                  RelatedItem:
                                    type: seq
                                    matching: all
                                    required: False
                                    sequence:
                                      - type: map
                                        required: True
                                        mapping:
                                          "@odata.id":
                                            type: str
                                            required: True

---
test_name: Query the ComponentEndpoints collection and get Node Information

stages:
  # 3. GET /ComponentEndpoints?type=Node API response code
  # 4. GET /ComponentEndpoints?type=Node API response body
  - name: Ensure that we can conduct a query on the ComponentEndpoints collection for a particular node
    request:
      url: "{base_url}/smd/hsm/v1/Inventory/ComponentEndpoints?type=Node"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ComponentEndpoints:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check that the xname IDs and type are correct to verify the query parameter since
                    # all of the component endpoint data was already checked during previous test cases
                    allowempty: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        pattern: "x[0-9]+c[0-9]+s[0-9]+b[0-9]+n[0-9]+"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      RedfishEndpointID:
                        type: str
                        required: True
                        pattern: "x[0-9]+c[0-9]+s[0-9]+b[0-9]+"
      save:
        json:
          id: ComponentEndpoints[0].RedfishEndpointID

  # 5. GET /ComponentEndpoints/{node} API response code
  # 6. GET /ComponentEndpoints/{node} API response body
  - name: Ensure that we can conduct a query on a specific node xname in the ComponentEndpoints collection
    request:
      url: "{base_url}/smd/hsm/v1/Inventory/ComponentEndpoints/{id}"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only check that the xname IDs and type are correct to verify the query parameter since
            # all of the component endpoint data was already checked during previous test cases
            allowempty: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "{id}"
              RedfishEndpointID:
                type: str
                required: True
                enum:
                  - "{id}"

---
test_name: Query the ComponentEndpoints collection and get NodeBMC Information

stages:
  # 7. GET /ComponentEndpoints?type=NodeBMC API response code
  # 8. GET /ComponentEndpoints?type=NodeBMC API response body
  - name: Ensure that we can conduct a query on the ComponentEndpoints collection for a particular BMC
    request:
      url: "{base_url}/smd/hsm/v1/Inventory/ComponentEndpoints?type=NodeBMC"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ComponentEndpoints:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check that the xname IDs and type are correct to verify the query parameter since
                    # all of the component endpoint data was already checked during previous test cases
                    allowempty: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        pattern: "x[0-9]+c[0-9]+s[0-9]+b[0-9]+"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "NodeBMC"
                      RedfishEndpointID:
                        type: str
                        required: True
                        pattern: "x[0-9]+c[0-9]+s[0-9]+b[0-9]+"
      save:
        json:
          id: ComponentEndpoints[0].RedfishEndpointID

  # 9. GET /ComponentEndpoints/{nodeBMC} API response code
  # 10. GET /ComponentEndpoints/{nodeBMC} API response body
  - name: Ensure that we can conduct a query on a specific node BMC xname in the ComponentEndpoints collection
    request:
      url: "{base_url}/smd/hsm/v1/Inventory/ComponentEndpoints/{id}"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only check that the xname IDs and type are correct to verify the query parameter since
            # all of the component endpoint data was already checked during previous test cases
            allowempty: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "{id}"
              RedfishEndpointID:
                type: str
                required: True
                enum:
                  - "{id}"

---
test_name: Query the ComponentEndpoints collection and get Node Enclosure Information

stages:
  # 11. GET /ComponentEndpoints?type=NodeEnclosure API response code
  # 12. GET /ComponentEndpoints?type=NodeEnclosure API response body
  - name: Ensure that we can conduct a query on the ComponentEndpoints collection for a particular node enclosure
    request:
      url: "{base_url}/smd/hsm/v1/Inventory/ComponentEndpoints?type=NodeEnclosure"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ComponentEndpoints:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check that the xname IDs and type are correct to verify the query parameter since
                    # all of the component endpoint data was already checked during previous test cases
                    allowempty: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        pattern: "x[0-9]+c[0-9]+s[0-9]+e[0-9]+"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "NodeEnclosure"
                      RedfishEndpointID:
                        type: str
                        required: True
                        pattern: "x[0-9]+c[0-9]+s[0-9]+b[0-9]+"
      save:
        json:
          id: ComponentEndpoints[0].RedfishEndpointID

  # 13. GET /ComponentEndpoints/{nodeEnclosure} API response code
  # 14. GET /ComponentEndpoints/{nodeEnclosure} API response body
  - name: Ensure that we can conduct a query on a specific node enclosure xname in the ComponentEndpoints collection
    request:
      url: "{base_url}/smd/hsm/v1/Inventory/ComponentEndpoints/{id}"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only check that the xname IDs and type are correct to verify the query parameter since
            # all of the component endpoint data was already checked during previous test cases
            allowempty: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "{id}"
              RedfishEndpointID:
                type: str
                required: True
                enum:
                  - "{id}"

---
test_name: Attempt to query the ComponentEndpoints collection with a valid but nonexistent xname

stages:
  # 15. GET /ComponentEndpoints/{nodeBMC} valid nonexistent API response code
  - name: Verify failure when providing a valid but nonexistent BMC xname in the ComponentEndpoints collection
    request:
      url: "{base_url}/smd/hsm/v1/Inventory/ComponentEndpoints/x1025c7s4b4"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 404

---
test_name: Attempt to query the ComponentEndpoints collection with an invalid xname

stages:
  # 16. GET /ComponentEndpoints/{nodeBMC} invalid API response code
  - name: Verify failure when providing an invalid BMC xname in the ComponentEndpoints collection
    request:
      url: "{base_url}/smd/hsm/v1/Inventory/ComponentEndpoints/x1025000c7s4b4"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 400

---
test_name: Attempt to query the ComponentEndpoints collection with a nid instead of an xname

stages:
  # 17. GET /ComponentEndpoints/{nid} unsupported id API response code
  - name: Verify failure when providing a nid name instead of a valid BMC xname in the ComponentEndpoints collection
    request:
      url: "{base_url}/smd/hsm/v1/Inventory/ComponentEndpoints/1"
      method: GET
      headers:
        Authorization: "Bearer {access_token}"
      verify: !bool "{verify}"
    response:
      status_code: 400
